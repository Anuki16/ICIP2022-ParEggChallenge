2023/11/02 02:17:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 565958581
    GPU 0,1: Quadro RTX 6000
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.2, V12.2.140
    GCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0
    PyTorch: 1.11.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0+cu113
    OpenCV: 4.8.0
    MMEngine: 0.9.0

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 565958581
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/11/02 02:17:13 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 8e-05
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
custom_hooks = [
    dict(
        switch_epoch=14,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                scale=(
                    640,
                    640,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='PackDetInputs'),
        ],
        type='PipelineSwitchHook'),
]
data_root = '/home/anuki/ICIP2022-ParEggChallenge/sliced_data/sliced_data/cut_960x1280'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = 'work_dirs/basic_config/best_coco_bbox_mAP_epoch_10.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 20
metainfo = dict(
    classes=(
        'Ascaris lumbricoides',
        'Capillaria philippinensis',
        'Enterobius vermicularis',
        'Fasciolopsis buski',
        'Hookworm egg',
        'Hymenolepis diminuta',
        'Hymenolepis nana',
        'Opisthorchis viverrine',
        'Paragonimus spp',
        'Taenia spp. egg',
        'Trichuris trichiura',
    ),
    palette=[
        (
            220,
            20,
            60,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            255,
            0,
        ),
        (
            0,
            0,
            255,
        ),
        (
            255,
            100,
            0,
        ),
        (
            100,
            255,
            0,
        ),
        (
            100,
            255,
            255,
        ),
        (
            255,
            100,
            100,
        ),
        (
            100,
            255,
            100,
        ),
        (
            100,
            100,
            255,
        ),
        (
            255,
            255,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=0.167,
        expand_ratio=0.5,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth',
            prefix='backbone.',
            type='Pretrained'),
        norm_cfg=dict(type='SyncBN'),
        type='CSPNeXt',
        widen_factor=0.375),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        anchor_generator=dict(
            offset=0, strides=[
                8,
                16,
                32,
            ], type='MlvlPointGenerator'),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        exp_on_reg=False,
        feat_channels=96,
        in_channels=96,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='SyncBN'),
        num_classes=11,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        expand_ratio=0.5,
        in_channels=[
            96,
            192,
            384,
        ],
        norm_cfg=dict(type='SyncBN'),
        num_csp_blocks=1,
        out_channels=96,
        type='CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(topk=13, type='DynamicSoftLabelAssigner'),
        debug=False,
        pos_weight=-1),
    type='RTMDet')
optim_wrapper = dict(
    optimizer=dict(lr=8e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=10, start_factor=1e-05, type='LinearLR'),
    dict(
        T_max=0,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=4.000000000000001e-06,
        type='CosineAnnealingLR'),
]
resume = False
split_root = '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/'
stage2_num_epochs = 6
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file=
        '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/cut_960x1280_val.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root=
        '/home/anuki/ICIP2022-ParEggChallenge/sliced_data/sliced_data/cut_960x1280',
        metainfo=dict(
            classes=(
                'Ascaris lumbricoides',
                'Capillaria philippinensis',
                'Enterobius vermicularis',
                'Fasciolopsis buski',
                'Hookworm egg',
                'Hymenolepis diminuta',
                'Hymenolepis nana',
                'Opisthorchis viverrine',
                'Paragonimus spp',
                'Taenia spp. egg',
                'Trichuris trichiura',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    255,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
                (
                    255,
                    100,
                    0,
                ),
                (
                    100,
                    255,
                    0,
                ),
                (
                    100,
                    255,
                    255,
                ),
                (
                    255,
                    100,
                    100,
                ),
                (
                    100,
                    255,
                    100,
                ),
                (
                    100,
                    100,
                    255,
                ),
                (
                    255,
                    255,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/cut_960x1280_val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_batch_size_per_gpu = 4
train_cfg = dict(
    dynamic_intervals=[
        (
            280,
            1,
        ),
    ],
    max_epochs=20,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=4,
    dataset=dict(
        ann_file=
        '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/cut_960x1280_train.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root=
        '/home/anuki/ICIP2022-ParEggChallenge/sliced_data/sliced_data/cut_960x1280',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'Ascaris lumbricoides',
                'Capillaria philippinensis',
                'Enterobius vermicularis',
                'Fasciolopsis buski',
                'Hookworm egg',
                'Hymenolepis diminuta',
                'Hymenolepis nana',
                'Opisthorchis viverrine',
                'Paragonimus spp',
                'Taenia spp. egg',
                'Trichuris trichiura',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    255,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
                (
                    255,
                    100,
                    0,
                ),
                (
                    100,
                    255,
                    0,
                ),
                (
                    100,
                    255,
                    255,
                ),
                (
                    255,
                    100,
                    100,
                ),
                (
                    100,
                    255,
                    100,
                ),
                (
                    100,
                    100,
                    255,
                ),
                (
                    255,
                    255,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=114.0,
                random_pop=False,
                type='CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    1280,
                    1280,
                ),
                type='RandomResize'),
            dict(crop_size=(
                640,
                640,
            ), type='RandomCrop'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=10,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                prob=0.5,
                random_pop=False,
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='CachedMixUp'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 2
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=114.0,
        random_pop=False,
        type='CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            1280,
            1280,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=10,
        pad_val=(
            114,
            114,
            114,
        ),
        prob=0.5,
        random_pop=False,
        ratio_range=(
            1.0,
            1.0,
        ),
        type='CachedMixUp'),
    dict(type='PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        scale=(
            640,
            640,
        ),
        type='RandomResize'),
    dict(crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(pad_val=dict(img=(
        114,
        114,
        114,
    )), size=(
        640,
        640,
    ), type='Pad'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file=
        '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/cut_960x1280_val.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root=
        '/home/anuki/ICIP2022-ParEggChallenge/sliced_data/sliced_data/cut_960x1280',
        metainfo=dict(
            classes=(
                'Ascaris lumbricoides',
                'Capillaria philippinensis',
                'Enterobius vermicularis',
                'Fasciolopsis buski',
                'Hookworm egg',
                'Hymenolepis diminuta',
                'Hymenolepis nana',
                'Opisthorchis viverrine',
                'Paragonimus spp',
                'Taenia spp. egg',
                'Trichuris trichiura',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    255,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
                (
                    255,
                    100,
                    0,
                ),
                (
                    100,
                    255,
                    0,
                ),
                (
                    100,
                    255,
                    255,
                ),
                (
                    255,
                    100,
                    100,
                ),
                (
                    100,
                    255,
                    100,
                ),
                (
                    100,
                    100,
                    255,
                ),
                (
                    255,
                    255,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/home/anuki/ICIP2022-ParEggChallenge/5-fold/fold-0/cut_960x1280_val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs/basic_config'

2023/11/02 02:17:23 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/11/02 02:17:23 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/11/02 02:17:28 - mmengine - INFO - Load checkpoint from work_dirs/basic_config/best_coco_bbox_mAP_epoch_10.pth
2023/11/02 02:17:30 - mmengine - INFO - Epoch(test) [   5/1015]    eta: 0:04:57  time: 0.2942  data_time: 0.1145  memory: 207  
2023/11/02 02:17:31 - mmengine - INFO - Epoch(test) [  10/1015]    eta: 0:03:52  time: 0.2315  data_time: 0.0592  memory: 207  
2023/11/02 02:17:32 - mmengine - INFO - Epoch(test) [  15/1015]    eta: 0:03:29  time: 0.2098  data_time: 0.0429  memory: 207  
2023/11/02 02:17:32 - mmengine - INFO - Epoch(test) [  20/1015]    eta: 0:03:15  time: 0.1970  data_time: 0.0330  memory: 207  
2023/11/02 02:17:33 - mmengine - INFO - Epoch(test) [  25/1015]    eta: 0:03:08  time: 0.1899  data_time: 0.0279  memory: 207  
2023/11/02 02:17:34 - mmengine - INFO - Epoch(test) [  30/1015]    eta: 0:03:03  time: 0.1865  data_time: 0.0244  memory: 207  
2023/11/02 02:17:35 - mmengine - INFO - Epoch(test) [  35/1015]    eta: 0:03:00  time: 0.1840  data_time: 0.0219  memory: 207  
2023/11/02 02:17:36 - mmengine - INFO - Epoch(test) [  40/1015]    eta: 0:02:57  time: 0.1820  data_time: 0.0200  memory: 207  
2023/11/02 02:17:36 - mmengine - INFO - Epoch(test) [  45/1015]    eta: 0:02:55  time: 0.1805  data_time: 0.0185  memory: 207  
2023/11/02 02:17:37 - mmengine - INFO - Epoch(test) [  50/1015]    eta: 0:02:53  time: 0.1794  data_time: 0.0173  memory: 207  
2023/11/02 02:17:38 - mmengine - INFO - Epoch(test) [  55/1015]    eta: 0:02:51  time: 0.1670  data_time: 0.0066  memory: 207  
2023/11/02 02:17:39 - mmengine - INFO - Epoch(test) [  60/1015]    eta: 0:02:49  time: 0.1668  data_time: 0.0069  memory: 207  
2023/11/02 02:17:40 - mmengine - INFO - Epoch(test) [  65/1015]    eta: 0:02:48  time: 0.1672  data_time: 0.0066  memory: 207  
2023/11/02 02:17:41 - mmengine - INFO - Epoch(test) [  70/1015]    eta: 0:02:46  time: 0.1682  data_time: 0.0069  memory: 207  
2023/11/02 02:17:42 - mmengine - INFO - Epoch(test) [  75/1015]    eta: 0:02:45  time: 0.1688  data_time: 0.0069  memory: 207  
2023/11/02 02:17:42 - mmengine - INFO - Epoch(test) [  80/1015]    eta: 0:02:43  time: 0.1686  data_time: 0.0069  memory: 207  
2023/11/02 02:17:43 - mmengine - INFO - Epoch(test) [  85/1015]    eta: 0:02:42  time: 0.1687  data_time: 0.0068  memory: 207  
2023/11/02 02:17:44 - mmengine - INFO - Epoch(test) [  90/1015]    eta: 0:02:41  time: 0.1690  data_time: 0.0068  memory: 207  
2023/11/02 02:17:45 - mmengine - INFO - Epoch(test) [  95/1015]    eta: 0:02:40  time: 0.1693  data_time: 0.0068  memory: 207  
2023/11/02 02:17:46 - mmengine - INFO - Epoch(test) [ 100/1015]    eta: 0:02:39  time: 0.1692  data_time: 0.0069  memory: 207  
2023/11/02 02:17:47 - mmengine - INFO - Epoch(test) [ 105/1015]    eta: 0:02:38  time: 0.1691  data_time: 0.0068  memory: 207  
2023/11/02 02:17:47 - mmengine - INFO - Epoch(test) [ 110/1015]    eta: 0:02:37  time: 0.1694  data_time: 0.0068  memory: 207  
2023/11/02 02:17:48 - mmengine - INFO - Epoch(test) [ 115/1015]    eta: 0:02:36  time: 0.1692  data_time: 0.0068  memory: 207  
2023/11/02 02:17:49 - mmengine - INFO - Epoch(test) [ 120/1015]    eta: 0:02:35  time: 0.1694  data_time: 0.0068  memory: 207  
2023/11/02 02:17:50 - mmengine - INFO - Epoch(test) [ 125/1015]    eta: 0:02:34  time: 0.1697  data_time: 0.0068  memory: 207  
2023/11/02 02:17:51 - mmengine - INFO - Epoch(test) [ 130/1015]    eta: 0:02:33  time: 0.1699  data_time: 0.0068  memory: 207  
2023/11/02 02:17:52 - mmengine - INFO - Epoch(test) [ 135/1015]    eta: 0:02:32  time: 0.1699  data_time: 0.0068  memory: 207  
2023/11/02 02:17:53 - mmengine - INFO - Epoch(test) [ 140/1015]    eta: 0:02:31  time: 0.1697  data_time: 0.0067  memory: 207  
2023/11/02 02:17:53 - mmengine - INFO - Epoch(test) [ 145/1015]    eta: 0:02:30  time: 0.1697  data_time: 0.0068  memory: 207  
2023/11/02 02:17:54 - mmengine - INFO - Epoch(test) [ 150/1015]    eta: 0:02:29  time: 0.1697  data_time: 0.0068  memory: 207  
2023/11/02 02:17:55 - mmengine - INFO - Epoch(test) [ 155/1015]    eta: 0:02:28  time: 0.1696  data_time: 0.0068  memory: 207  
2023/11/02 02:17:56 - mmengine - INFO - Epoch(test) [ 160/1015]    eta: 0:02:27  time: 0.1694  data_time: 0.0068  memory: 207  
2023/11/02 02:17:57 - mmengine - INFO - Epoch(test) [ 165/1015]    eta: 0:02:26  time: 0.1694  data_time: 0.0069  memory: 207  
2023/11/02 02:17:58 - mmengine - INFO - Epoch(test) [ 170/1015]    eta: 0:02:25  time: 0.1690  data_time: 0.0069  memory: 207  
2023/11/02 02:17:58 - mmengine - INFO - Epoch(test) [ 175/1015]    eta: 0:02:24  time: 0.1688  data_time: 0.0068  memory: 207  
2023/11/02 02:17:59 - mmengine - INFO - Epoch(test) [ 180/1015]    eta: 0:02:23  time: 0.1689  data_time: 0.0068  memory: 207  
2023/11/02 02:18:00 - mmengine - INFO - Epoch(test) [ 185/1015]    eta: 0:02:22  time: 0.1690  data_time: 0.0069  memory: 207  
2023/11/02 02:18:01 - mmengine - INFO - Epoch(test) [ 190/1015]    eta: 0:02:21  time: 0.1688  data_time: 0.0068  memory: 207  
2023/11/02 02:18:02 - mmengine - INFO - Epoch(test) [ 195/1015]    eta: 0:02:20  time: 0.1686  data_time: 0.0067  memory: 207  
2023/11/02 02:18:03 - mmengine - INFO - Epoch(test) [ 200/1015]    eta: 0:02:19  time: 0.1685  data_time: 0.0067  memory: 207  
2023/11/02 02:18:04 - mmengine - INFO - Epoch(test) [ 205/1015]    eta: 0:02:19  time: 0.1687  data_time: 0.0068  memory: 207  
2023/11/02 02:18:04 - mmengine - INFO - Epoch(test) [ 210/1015]    eta: 0:02:17  time: 0.1674  data_time: 0.0068  memory: 207  
2023/11/02 02:18:05 - mmengine - INFO - Epoch(test) [ 215/1015]    eta: 0:02:16  time: 0.1675  data_time: 0.0068  memory: 207  
2023/11/02 02:18:06 - mmengine - INFO - Epoch(test) [ 220/1015]    eta: 0:02:16  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:07 - mmengine - INFO - Epoch(test) [ 225/1015]    eta: 0:02:15  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:08 - mmengine - INFO - Epoch(test) [ 230/1015]    eta: 0:02:14  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:09 - mmengine - INFO - Epoch(test) [ 235/1015]    eta: 0:02:13  time: 0.1677  data_time: 0.0068  memory: 207  
2023/11/02 02:18:09 - mmengine - INFO - Epoch(test) [ 240/1015]    eta: 0:02:12  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:10 - mmengine - INFO - Epoch(test) [ 245/1015]    eta: 0:02:11  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:11 - mmengine - INFO - Epoch(test) [ 250/1015]    eta: 0:02:10  time: 0.1680  data_time: 0.0068  memory: 207  
2023/11/02 02:18:12 - mmengine - INFO - Epoch(test) [ 255/1015]    eta: 0:02:09  time: 0.1679  data_time: 0.0068  memory: 207  
2023/11/02 02:18:13 - mmengine - INFO - Epoch(test) [ 260/1015]    eta: 0:02:09  time: 0.1693  data_time: 0.0068  memory: 207  
2023/11/02 02:18:14 - mmengine - INFO - Epoch(test) [ 265/1015]    eta: 0:02:08  time: 0.1693  data_time: 0.0068  memory: 207  
2023/11/02 02:18:14 - mmengine - INFO - Epoch(test) [ 270/1015]    eta: 0:02:07  time: 0.1691  data_time: 0.0068  memory: 207  
2023/11/02 02:18:15 - mmengine - INFO - Epoch(test) [ 275/1015]    eta: 0:02:06  time: 0.1691  data_time: 0.0068  memory: 207  
2023/11/02 02:18:16 - mmengine - INFO - Epoch(test) [ 280/1015]    eta: 0:02:05  time: 0.1691  data_time: 0.0068  memory: 207  
2023/11/02 02:18:17 - mmengine - INFO - Epoch(test) [ 285/1015]    eta: 0:02:04  time: 0.1692  data_time: 0.0068  memory: 207  
2023/11/02 02:18:18 - mmengine - INFO - Epoch(test) [ 290/1015]    eta: 0:02:03  time: 0.1691  data_time: 0.0067  memory: 207  
2023/11/02 02:18:19 - mmengine - INFO - Epoch(test) [ 295/1015]    eta: 0:02:02  time: 0.1691  data_time: 0.0068  memory: 207  
2023/11/02 02:18:20 - mmengine - INFO - Epoch(test) [ 300/1015]    eta: 0:02:02  time: 0.1690  data_time: 0.0068  memory: 207  
2023/11/02 02:18:20 - mmengine - INFO - Epoch(test) [ 305/1015]    eta: 0:02:01  time: 0.1691  data_time: 0.0067  memory: 207  
2023/11/02 02:18:21 - mmengine - INFO - Epoch(test) [ 310/1015]    eta: 0:02:00  time: 0.1690  data_time: 0.0068  memory: 207  
2023/11/02 02:18:22 - mmengine - INFO - Epoch(test) [ 315/1015]    eta: 0:01:59  time: 0.1689  data_time: 0.0067  memory: 207  
2023/11/02 02:18:23 - mmengine - INFO - Epoch(test) [ 320/1015]    eta: 0:01:58  time: 0.1689  data_time: 0.0068  memory: 207  
2023/11/02 02:18:24 - mmengine - INFO - Epoch(test) [ 325/1015]    eta: 0:01:57  time: 0.1687  data_time: 0.0067  memory: 207  
2023/11/02 02:18:25 - mmengine - INFO - Epoch(test) [ 330/1015]    eta: 0:01:56  time: 0.1684  data_time: 0.0067  memory: 207  
2023/11/02 02:18:25 - mmengine - INFO - Epoch(test) [ 335/1015]    eta: 0:01:55  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:18:26 - mmengine - INFO - Epoch(test) [ 340/1015]    eta: 0:01:54  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:18:27 - mmengine - INFO - Epoch(test) [ 345/1015]    eta: 0:01:54  time: 0.1683  data_time: 0.0068  memory: 207  
2023/11/02 02:18:28 - mmengine - INFO - Epoch(test) [ 350/1015]    eta: 0:01:53  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:18:29 - mmengine - INFO - Epoch(test) [ 355/1015]    eta: 0:01:52  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:18:30 - mmengine - INFO - Epoch(test) [ 360/1015]    eta: 0:01:51  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:18:31 - mmengine - INFO - Epoch(test) [ 365/1015]    eta: 0:01:50  time: 0.1684  data_time: 0.0067  memory: 207  
2023/11/02 02:18:31 - mmengine - INFO - Epoch(test) [ 370/1015]    eta: 0:01:49  time: 0.1685  data_time: 0.0067  memory: 207  
2023/11/02 02:18:32 - mmengine - INFO - Epoch(test) [ 375/1015]    eta: 0:01:48  time: 0.1689  data_time: 0.0067  memory: 207  
2023/11/02 02:18:33 - mmengine - INFO - Epoch(test) [ 380/1015]    eta: 0:01:48  time: 0.1691  data_time: 0.0067  memory: 207  
2023/11/02 02:18:34 - mmengine - INFO - Epoch(test) [ 385/1015]    eta: 0:01:47  time: 0.1692  data_time: 0.0067  memory: 207  
2023/11/02 02:18:35 - mmengine - INFO - Epoch(test) [ 390/1015]    eta: 0:01:46  time: 0.1692  data_time: 0.0067  memory: 207  
2023/11/02 02:18:36 - mmengine - INFO - Epoch(test) [ 395/1015]    eta: 0:01:45  time: 0.1693  data_time: 0.0066  memory: 207  
2023/11/02 02:18:36 - mmengine - INFO - Epoch(test) [ 400/1015]    eta: 0:01:44  time: 0.1695  data_time: 0.0066  memory: 207  
2023/11/02 02:18:37 - mmengine - INFO - Epoch(test) [ 405/1015]    eta: 0:01:43  time: 0.1695  data_time: 0.0067  memory: 207  
2023/11/02 02:18:38 - mmengine - INFO - Epoch(test) [ 410/1015]    eta: 0:01:42  time: 0.1694  data_time: 0.0067  memory: 207  
2023/11/02 02:18:39 - mmengine - INFO - Epoch(test) [ 415/1015]    eta: 0:01:42  time: 0.1693  data_time: 0.0067  memory: 207  
2023/11/02 02:18:40 - mmengine - INFO - Epoch(test) [ 420/1015]    eta: 0:01:41  time: 0.1693  data_time: 0.0067  memory: 207  
2023/11/02 02:18:41 - mmengine - INFO - Epoch(test) [ 425/1015]    eta: 0:01:40  time: 0.1693  data_time: 0.0067  memory: 207  
2023/11/02 02:18:42 - mmengine - INFO - Epoch(test) [ 430/1015]    eta: 0:01:39  time: 0.1695  data_time: 0.0067  memory: 207  
2023/11/02 02:18:42 - mmengine - INFO - Epoch(test) [ 435/1015]    eta: 0:01:38  time: 0.1696  data_time: 0.0067  memory: 207  
2023/11/02 02:18:43 - mmengine - INFO - Epoch(test) [ 440/1015]    eta: 0:01:37  time: 0.1698  data_time: 0.0067  memory: 207  
2023/11/02 02:18:44 - mmengine - INFO - Epoch(test) [ 445/1015]    eta: 0:01:36  time: 0.1696  data_time: 0.0067  memory: 207  
2023/11/02 02:18:45 - mmengine - INFO - Epoch(test) [ 450/1015]    eta: 0:01:36  time: 0.1695  data_time: 0.0067  memory: 207  
2023/11/02 02:18:46 - mmengine - INFO - Epoch(test) [ 455/1015]    eta: 0:01:35  time: 0.1694  data_time: 0.0067  memory: 207  
2023/11/02 02:18:47 - mmengine - INFO - Epoch(test) [ 460/1015]    eta: 0:01:34  time: 0.1694  data_time: 0.0067  memory: 207  
2023/11/02 02:18:47 - mmengine - INFO - Epoch(test) [ 465/1015]    eta: 0:01:33  time: 0.1694  data_time: 0.0067  memory: 207  
2023/11/02 02:18:48 - mmengine - INFO - Epoch(test) [ 470/1015]    eta: 0:01:32  time: 0.1694  data_time: 0.0067  memory: 207  
2023/11/02 02:18:49 - mmengine - INFO - Epoch(test) [ 475/1015]    eta: 0:01:31  time: 0.1692  data_time: 0.0068  memory: 207  
2023/11/02 02:18:50 - mmengine - INFO - Epoch(test) [ 480/1015]    eta: 0:01:30  time: 0.1690  data_time: 0.0067  memory: 207  
2023/11/02 02:18:51 - mmengine - INFO - Epoch(test) [ 485/1015]    eta: 0:01:30  time: 0.1690  data_time: 0.0068  memory: 207  
2023/11/02 02:18:52 - mmengine - INFO - Epoch(test) [ 490/1015]    eta: 0:01:29  time: 0.1688  data_time: 0.0067  memory: 207  
2023/11/02 02:18:53 - mmengine - INFO - Epoch(test) [ 495/1015]    eta: 0:01:28  time: 0.1687  data_time: 0.0067  memory: 207  
2023/11/02 02:18:53 - mmengine - INFO - Epoch(test) [ 500/1015]    eta: 0:01:27  time: 0.1688  data_time: 0.0067  memory: 207  
2023/11/02 02:18:54 - mmengine - INFO - Epoch(test) [ 505/1015]    eta: 0:01:26  time: 0.1690  data_time: 0.0067  memory: 207  
2023/11/02 02:18:55 - mmengine - INFO - Epoch(test) [ 510/1015]    eta: 0:01:25  time: 0.1691  data_time: 0.0067  memory: 207  
2023/11/02 02:18:56 - mmengine - INFO - Epoch(test) [ 515/1015]    eta: 0:01:24  time: 0.1689  data_time: 0.0067  memory: 207  
2023/11/02 02:18:57 - mmengine - INFO - Epoch(test) [ 520/1015]    eta: 0:01:24  time: 0.1689  data_time: 0.0067  memory: 207  
2023/11/02 02:18:58 - mmengine - INFO - Epoch(test) [ 525/1015]    eta: 0:01:23  time: 0.1686  data_time: 0.0066  memory: 207  
2023/11/02 02:18:58 - mmengine - INFO - Epoch(test) [ 530/1015]    eta: 0:01:22  time: 0.1686  data_time: 0.0066  memory: 207  
2023/11/02 02:18:59 - mmengine - INFO - Epoch(test) [ 535/1015]    eta: 0:01:21  time: 0.1684  data_time: 0.0066  memory: 207  
2023/11/02 02:19:00 - mmengine - INFO - Epoch(test) [ 540/1015]    eta: 0:01:20  time: 0.1684  data_time: 0.0066  memory: 207  
2023/11/02 02:19:01 - mmengine - INFO - Epoch(test) [ 545/1015]    eta: 0:01:19  time: 0.1682  data_time: 0.0066  memory: 207  
2023/11/02 02:19:02 - mmengine - INFO - Epoch(test) [ 550/1015]    eta: 0:01:18  time: 0.1681  data_time: 0.0066  memory: 207  
2023/11/02 02:19:03 - mmengine - INFO - Epoch(test) [ 555/1015]    eta: 0:01:18  time: 0.1681  data_time: 0.0067  memory: 207  
2023/11/02 02:19:03 - mmengine - INFO - Epoch(test) [ 560/1015]    eta: 0:01:17  time: 0.1681  data_time: 0.0067  memory: 207  
2023/11/02 02:19:04 - mmengine - INFO - Epoch(test) [ 565/1015]    eta: 0:01:16  time: 0.1682  data_time: 0.0067  memory: 207  
2023/11/02 02:19:05 - mmengine - INFO - Epoch(test) [ 570/1015]    eta: 0:01:15  time: 0.1684  data_time: 0.0067  memory: 207  
2023/11/02 02:19:06 - mmengine - INFO - Epoch(test) [ 575/1015]    eta: 0:01:14  time: 0.1687  data_time: 0.0067  memory: 207  
2023/11/02 02:19:07 - mmengine - INFO - Epoch(test) [ 580/1015]    eta: 0:01:13  time: 0.1684  data_time: 0.0067  memory: 207  
2023/11/02 02:19:08 - mmengine - INFO - Epoch(test) [ 585/1015]    eta: 0:01:12  time: 0.1686  data_time: 0.0067  memory: 207  
2023/11/02 02:19:09 - mmengine - INFO - Epoch(test) [ 590/1015]    eta: 0:01:12  time: 0.1685  data_time: 0.0067  memory: 207  
2023/11/02 02:19:09 - mmengine - INFO - Epoch(test) [ 595/1015]    eta: 0:01:11  time: 0.1686  data_time: 0.0067  memory: 207  
2023/11/02 02:19:10 - mmengine - INFO - Epoch(test) [ 600/1015]    eta: 0:01:10  time: 0.1687  data_time: 0.0067  memory: 207  
2023/11/02 02:19:11 - mmengine - INFO - Epoch(test) [ 605/1015]    eta: 0:01:09  time: 0.1688  data_time: 0.0066  memory: 207  
2023/11/02 02:19:12 - mmengine - INFO - Epoch(test) [ 610/1015]    eta: 0:01:08  time: 0.1688  data_time: 0.0066  memory: 207  
2023/11/02 02:19:13 - mmengine - INFO - Epoch(test) [ 615/1015]    eta: 0:01:07  time: 0.1689  data_time: 0.0066  memory: 207  
2023/11/02 02:19:14 - mmengine - INFO - Epoch(test) [ 620/1015]    eta: 0:01:07  time: 0.1687  data_time: 0.0065  memory: 207  
2023/11/02 02:19:14 - mmengine - INFO - Epoch(test) [ 625/1015]    eta: 0:01:06  time: 0.1687  data_time: 0.0065  memory: 207  
2023/11/02 02:19:15 - mmengine - INFO - Epoch(test) [ 630/1015]    eta: 0:01:05  time: 0.1689  data_time: 0.0065  memory: 207  
2023/11/02 02:19:16 - mmengine - INFO - Epoch(test) [ 635/1015]    eta: 0:01:04  time: 0.1690  data_time: 0.0065  memory: 207  
2023/11/02 02:19:17 - mmengine - INFO - Epoch(test) [ 640/1015]    eta: 0:01:03  time: 0.1691  data_time: 0.0065  memory: 207  
2023/11/02 02:19:18 - mmengine - INFO - Epoch(test) [ 645/1015]    eta: 0:01:02  time: 0.1692  data_time: 0.0065  memory: 207  
2023/11/02 02:19:19 - mmengine - INFO - Epoch(test) [ 650/1015]    eta: 0:01:01  time: 0.1690  data_time: 0.0065  memory: 207  
2023/11/02 02:19:20 - mmengine - INFO - Epoch(test) [ 655/1015]    eta: 0:01:01  time: 0.1686  data_time: 0.0065  memory: 207  
2023/11/02 02:19:20 - mmengine - INFO - Epoch(test) [ 660/1015]    eta: 0:01:00  time: 0.1685  data_time: 0.0065  memory: 207  
2023/11/02 02:19:21 - mmengine - INFO - Epoch(test) [ 665/1015]    eta: 0:00:59  time: 0.1685  data_time: 0.0065  memory: 207  
2023/11/02 02:19:22 - mmengine - INFO - Epoch(test) [ 670/1015]    eta: 0:00:58  time: 0.1685  data_time: 0.0065  memory: 207  
2023/11/02 02:19:23 - mmengine - INFO - Epoch(test) [ 675/1015]    eta: 0:00:57  time: 0.1685  data_time: 0.0065  memory: 207  
2023/11/02 02:19:24 - mmengine - INFO - Epoch(test) [ 680/1015]    eta: 0:00:56  time: 0.1683  data_time: 0.0065  memory: 207  
2023/11/02 02:19:25 - mmengine - INFO - Epoch(test) [ 685/1015]    eta: 0:00:55  time: 0.1681  data_time: 0.0065  memory: 207  
2023/11/02 02:19:25 - mmengine - INFO - Epoch(test) [ 690/1015]    eta: 0:00:55  time: 0.1679  data_time: 0.0065  memory: 207  
2023/11/02 02:19:26 - mmengine - INFO - Epoch(test) [ 695/1015]    eta: 0:00:54  time: 0.1678  data_time: 0.0065  memory: 207  
2023/11/02 02:19:27 - mmengine - INFO - Epoch(test) [ 700/1015]    eta: 0:00:53  time: 0.1679  data_time: 0.0065  memory: 207  
2023/11/02 02:19:28 - mmengine - INFO - Epoch(test) [ 705/1015]    eta: 0:00:52  time: 0.1681  data_time: 0.0065  memory: 207  
2023/11/02 02:19:29 - mmengine - INFO - Epoch(test) [ 710/1015]    eta: 0:00:51  time: 0.1681  data_time: 0.0065  memory: 207  
2023/11/02 02:19:30 - mmengine - INFO - Epoch(test) [ 715/1015]    eta: 0:00:50  time: 0.1681  data_time: 0.0065  memory: 207  
2023/11/02 02:19:30 - mmengine - INFO - Epoch(test) [ 720/1015]    eta: 0:00:50  time: 0.1680  data_time: 0.0065  memory: 207  
2023/11/02 02:19:31 - mmengine - INFO - Epoch(test) [ 725/1015]    eta: 0:00:49  time: 0.1680  data_time: 0.0065  memory: 207  
2023/11/02 02:19:32 - mmengine - INFO - Epoch(test) [ 730/1015]    eta: 0:00:48  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:33 - mmengine - INFO - Epoch(test) [ 735/1015]    eta: 0:00:47  time: 0.1684  data_time: 0.0065  memory: 207  
2023/11/02 02:19:34 - mmengine - INFO - Epoch(test) [ 740/1015]    eta: 0:00:46  time: 0.1684  data_time: 0.0065  memory: 207  
2023/11/02 02:19:35 - mmengine - INFO - Epoch(test) [ 745/1015]    eta: 0:00:45  time: 0.1683  data_time: 0.0065  memory: 207  
2023/11/02 02:19:35 - mmengine - INFO - Epoch(test) [ 750/1015]    eta: 0:00:44  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:36 - mmengine - INFO - Epoch(test) [ 755/1015]    eta: 0:00:44  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:37 - mmengine - INFO - Epoch(test) [ 760/1015]    eta: 0:00:43  time: 0.1683  data_time: 0.0065  memory: 207  
2023/11/02 02:19:38 - mmengine - INFO - Epoch(test) [ 765/1015]    eta: 0:00:42  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:39 - mmengine - INFO - Epoch(test) [ 770/1015]    eta: 0:00:41  time: 0.1684  data_time: 0.0065  memory: 207  
2023/11/02 02:19:40 - mmengine - INFO - Epoch(test) [ 775/1015]    eta: 0:00:40  time: 0.1683  data_time: 0.0065  memory: 207  
2023/11/02 02:19:41 - mmengine - INFO - Epoch(test) [ 780/1015]    eta: 0:00:39  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:41 - mmengine - INFO - Epoch(test) [ 785/1015]    eta: 0:00:38  time: 0.1680  data_time: 0.0065  memory: 207  
2023/11/02 02:19:42 - mmengine - INFO - Epoch(test) [ 790/1015]    eta: 0:00:38  time: 0.1682  data_time: 0.0065  memory: 207  
2023/11/02 02:19:43 - mmengine - INFO - Epoch(test) [ 795/1015]    eta: 0:00:37  time: 0.1684  data_time: 0.0065  memory: 207  
2023/11/02 02:19:44 - mmengine - INFO - Epoch(test) [ 800/1015]    eta: 0:00:36  time: 0.1684  data_time: 0.0065  memory: 207  
2023/11/02 02:19:45 - mmengine - INFO - Epoch(test) [ 805/1015]    eta: 0:00:35  time: 0.1687  data_time: 0.0064  memory: 207  
2023/11/02 02:19:46 - mmengine - INFO - Epoch(test) [ 810/1015]    eta: 0:00:34  time: 0.1687  data_time: 0.0065  memory: 207  
2023/11/02 02:19:46 - mmengine - INFO - Epoch(test) [ 815/1015]    eta: 0:00:33  time: 0.1687  data_time: 0.0064  memory: 207  
2023/11/02 02:19:47 - mmengine - INFO - Epoch(test) [ 820/1015]    eta: 0:00:33  time: 0.1686  data_time: 0.0064  memory: 207  
2023/11/02 02:19:48 - mmengine - INFO - Epoch(test) [ 825/1015]    eta: 0:00:32  time: 0.1687  data_time: 0.0064  memory: 207  
2023/11/02 02:19:49 - mmengine - INFO - Epoch(test) [ 830/1015]    eta: 0:00:31  time: 0.1688  data_time: 0.0064  memory: 207  
2023/11/02 02:19:50 - mmengine - INFO - Epoch(test) [ 835/1015]    eta: 0:00:30  time: 0.1691  data_time: 0.0065  memory: 207  
2023/11/02 02:19:51 - mmengine - INFO - Epoch(test) [ 840/1015]    eta: 0:00:29  time: 0.1688  data_time: 0.0064  memory: 207  
2023/11/02 02:19:52 - mmengine - INFO - Epoch(test) [ 845/1015]    eta: 0:00:28  time: 0.1687  data_time: 0.0064  memory: 207  
2023/11/02 02:19:52 - mmengine - INFO - Epoch(test) [ 850/1015]    eta: 0:00:27  time: 0.1686  data_time: 0.0064  memory: 207  
2023/11/02 02:19:53 - mmengine - INFO - Epoch(test) [ 855/1015]    eta: 0:00:27  time: 0.1685  data_time: 0.0064  memory: 207  
2023/11/02 02:19:54 - mmengine - INFO - Epoch(test) [ 860/1015]    eta: 0:00:26  time: 0.1684  data_time: 0.0064  memory: 207  
2023/11/02 02:19:55 - mmengine - INFO - Epoch(test) [ 865/1015]    eta: 0:00:25  time: 0.1685  data_time: 0.0064  memory: 207  
2023/11/02 02:19:56 - mmengine - INFO - Epoch(test) [ 870/1015]    eta: 0:00:24  time: 0.1686  data_time: 0.0064  memory: 207  
2023/11/02 02:19:57 - mmengine - INFO - Epoch(test) [ 875/1015]    eta: 0:00:23  time: 0.1685  data_time: 0.0064  memory: 207  
2023/11/02 02:19:57 - mmengine - INFO - Epoch(test) [ 880/1015]    eta: 0:00:22  time: 0.1685  data_time: 0.0064  memory: 207  
2023/11/02 02:19:58 - mmengine - INFO - Epoch(test) [ 885/1015]    eta: 0:00:22  time: 0.1685  data_time: 0.0064  memory: 207  
2023/11/02 02:19:59 - mmengine - INFO - Epoch(test) [ 890/1015]    eta: 0:00:21  time: 0.1688  data_time: 0.0064  memory: 207  
2023/11/02 02:20:00 - mmengine - INFO - Epoch(test) [ 895/1015]    eta: 0:00:20  time: 0.1689  data_time: 0.0064  memory: 207  
2023/11/02 02:20:01 - mmengine - INFO - Epoch(test) [ 900/1015]    eta: 0:00:19  time: 0.1691  data_time: 0.0064  memory: 207  
2023/11/02 02:20:02 - mmengine - INFO - Epoch(test) [ 905/1015]    eta: 0:00:18  time: 0.1692  data_time: 0.0065  memory: 207  
2023/11/02 02:20:03 - mmengine - INFO - Epoch(test) [ 910/1015]    eta: 0:00:17  time: 0.1693  data_time: 0.0064  memory: 207  
2023/11/02 02:20:03 - mmengine - INFO - Epoch(test) [ 915/1015]    eta: 0:00:16  time: 0.1694  data_time: 0.0065  memory: 207  
2023/11/02 02:20:04 - mmengine - INFO - Epoch(test) [ 920/1015]    eta: 0:00:16  time: 0.1693  data_time: 0.0065  memory: 207  
2023/11/02 02:20:05 - mmengine - INFO - Epoch(test) [ 925/1015]    eta: 0:00:15  time: 0.1696  data_time: 0.0065  memory: 207  
2023/11/02 02:20:06 - mmengine - INFO - Epoch(test) [ 930/1015]    eta: 0:00:14  time: 0.1696  data_time: 0.0065  memory: 207  
2023/11/02 02:20:07 - mmengine - INFO - Epoch(test) [ 935/1015]    eta: 0:00:13  time: 0.1695  data_time: 0.0065  memory: 207  
2023/11/02 02:20:08 - mmengine - INFO - Epoch(test) [ 940/1015]    eta: 0:00:12  time: 0.1693  data_time: 0.0065  memory: 207  
2023/11/02 02:20:08 - mmengine - INFO - Epoch(test) [ 945/1015]    eta: 0:00:11  time: 0.1691  data_time: 0.0065  memory: 207  
2023/11/02 02:20:09 - mmengine - INFO - Epoch(test) [ 950/1015]    eta: 0:00:11  time: 0.1686  data_time: 0.0065  memory: 207  
2023/11/02 02:20:10 - mmengine - INFO - Epoch(test) [ 955/1015]    eta: 0:00:10  time: 0.1683  data_time: 0.0065  memory: 207  
2023/11/02 02:20:11 - mmengine - INFO - Epoch(test) [ 960/1015]    eta: 0:00:09  time: 0.1680  data_time: 0.0065  memory: 207  
2023/11/02 02:20:12 - mmengine - INFO - Epoch(test) [ 965/1015]    eta: 0:00:08  time: 0.1678  data_time: 0.0065  memory: 207  
2023/11/02 02:20:13 - mmengine - INFO - Epoch(test) [ 970/1015]    eta: 0:00:07  time: 0.1675  data_time: 0.0065  memory: 207  
2023/11/02 02:20:13 - mmengine - INFO - Epoch(test) [ 975/1015]    eta: 0:00:06  time: 0.1670  data_time: 0.0066  memory: 207  
2023/11/02 02:20:14 - mmengine - INFO - Epoch(test) [ 980/1015]    eta: 0:00:05  time: 0.1668  data_time: 0.0065  memory: 207  
2023/11/02 02:20:15 - mmengine - INFO - Epoch(test) [ 985/1015]    eta: 0:00:05  time: 0.1666  data_time: 0.0065  memory: 207  
2023/11/02 02:20:16 - mmengine - INFO - Epoch(test) [ 990/1015]    eta: 0:00:04  time: 0.1666  data_time: 0.0065  memory: 207  
2023/11/02 02:20:17 - mmengine - INFO - Epoch(test) [ 995/1015]    eta: 0:00:03  time: 0.1667  data_time: 0.0065  memory: 207  
2023/11/02 02:20:18 - mmengine - INFO - Epoch(test) [1000/1015]    eta: 0:00:02  time: 0.1667  data_time: 0.0065  memory: 207  
2023/11/02 02:20:18 - mmengine - INFO - Epoch(test) [1005/1015]    eta: 0:00:01  time: 0.1668  data_time: 0.0065  memory: 207  
2023/11/02 02:20:19 - mmengine - INFO - Epoch(test) [1010/1015]    eta: 0:00:00  time: 0.1668  data_time: 0.0065  memory: 207  
2023/11/02 02:20:20 - mmengine - INFO - Epoch(test) [1015/1015]    eta: 0:00:00  time: 0.1666  data_time: 0.0064  memory: 207  
2023/11/02 02:20:43 - mmengine - INFO - Evaluating bbox...
2023/11/02 02:21:35 - mmengine - INFO - bbox_mAP_copypaste: 0.924 0.993 0.984 -1.000 0.799 0.926
2023/11/02 02:21:37 - mmengine - INFO - Epoch(test) [1015/1015]    coco/bbox_mAP: 0.9240  coco/bbox_mAP_50: 0.9930  coco/bbox_mAP_75: 0.9840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.7990  coco/bbox_mAP_l: 0.9260  data_time: 0.0071  time: 0.1691
